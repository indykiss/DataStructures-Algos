
Longest Common Prefix
Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".


Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.



class Solution:
    def longestCommonPrefix(self, strs: List[str]) -> str:
        
        # binary search technically works 
        # check if the midpoint is a common char 
        # then adjust floor or ceil 
        if not strs:
            return ""

        smallestWord = min(strs, key=len)
        floor, ceil = 0, len(smallestWord)

        while floor < ceil:
            mid = floor + (ceil - floor) // 2  
            
            match = True
            for word in strs:
                if word[:mid + 1] != smallestWord[:mid + 1]:
                    match = False
                    break  
                
            if match:
                floor = mid + 1  
            else:
                ceil = mid 
        
        return smallestWord[:ceil]
            
        
        '''
        # hypothetically most intuitive option
        if strs == None or len(strs) == 0:
            return ""

        for i in range(len(strs[0])):
            char = strs[0][i]

            for j in range(1, len(strs)):
                # end of this word, return entire word as prefix
                if i == len(strs[j]):
                    return strs[0][0:i]
                # if not prefix anymore 
                if strs[j][i] != char:
                    return strs[0][0:i]

        return strs[0]            
        '''
